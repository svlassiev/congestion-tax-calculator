/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package congestion.calculator;

import org.junit.Test;

import java.time.Month;
import java.time.ZoneId;
import java.time.ZonedDateTime;

import static org.junit.Assert.*;

public class CalculatorTest {
    @Test public void julyIsTollFree() {
        CongestionTaxCalculator calculator = new CongestionTaxCalculator();
        for (TaxableVehicle vehicle: TaxableVehicle.values())
        {
            for (int day = 1; day <= 31; ++day)
            {
                ZonedDateTime dateTime = ZonedDateTime.of(2013, Month.JULY.getValue(), day, 14, 0, 0, 0, ZoneId.of("CET"));
                assertEquals("July is a free month", 0, calculator.getTollFee(dateTime, vehicle));
            }
        }
    }

    @Test public void august142013IsNotFreeForCar() {
        CongestionTaxCalculator calculator = new CongestionTaxCalculator();
        ZonedDateTime dateTime = ZonedDateTime.of(2013, Month.AUGUST.getValue(), 14, 14, 0, 0, 0, ZoneId.of("CET"));
        assertNotEquals("August 14th 2013 should not be free at 14:00 for a car", 0, calculator.getTollFee(dateTime, TaxableVehicle.CAR));
    }

    @Test public void august142013IsNotFreeForTractor() {
        CongestionTaxCalculator calculator = new CongestionTaxCalculator();
        ZonedDateTime dateTime = ZonedDateTime.of(2013, Month.AUGUST.getValue(), 14, 14, 0, 0, 0, ZoneId.of("CET"));
        assertNotEquals("August 14th 2013 should not be free at 14:00 for a tractor", 0, calculator.getTollFee(dateTime, TaxableVehicle.TRACTOR));
    }

    @Test public void emergencyIsTollFree() {
        CongestionTaxCalculator calculator = new CongestionTaxCalculator();
        ZonedDateTime dateTime = ZonedDateTime.of(2013, Month.AUGUST.getValue(), 14, 14, 0, 0, 0, ZoneId.of("CET"));
        assertEquals("Emergency shouldn't pay", 0, calculator.getTollFee(dateTime, TaxableVehicle.EMERGENCY));
    }

    @Test public void busIsTollFree() {
        CongestionTaxCalculator calculator = new CongestionTaxCalculator();
        ZonedDateTime dateTime = ZonedDateTime.of(2013, Month.AUGUST.getValue(), 14, 14, 0, 0, 0, ZoneId.of("CET"));
        assertEquals("Bus shouldn't pay", 0, calculator.getTollFee(dateTime, TaxableVehicle.BUS));
    }

    @Test public void diplomatIsTollFree() {
        CongestionTaxCalculator calculator = new CongestionTaxCalculator();
        ZonedDateTime dateTime = ZonedDateTime.of(2013, Month.AUGUST.getValue(), 14, 14, 0, 0, 0, ZoneId.of("CET"));
        assertEquals("Diplomat shouldn't pay", 0, calculator.getTollFee(dateTime, TaxableVehicle.DIPLOMAT));
    }

    @Test public void motorcycleIsTollFree() {
        CongestionTaxCalculator calculator = new CongestionTaxCalculator();
        ZonedDateTime dateTime = ZonedDateTime.of(2013, Month.AUGUST.getValue(), 14, 14, 0, 0, 0, ZoneId.of("CET"));
        assertEquals("Motorcycle shouldn't pay", 0, calculator.getTollFee(dateTime, TaxableVehicle.MOTORCYCLE));
    }

    @Test public void militaryIsTollFree() {
        CongestionTaxCalculator calculator = new CongestionTaxCalculator();
        ZonedDateTime dateTime = ZonedDateTime.of(2013, Month.AUGUST.getValue(), 14, 14, 0, 0, 0, ZoneId.of("CET"));
        assertEquals("Military shouldn't pay", 0, calculator.getTollFee(dateTime, TaxableVehicle.MILITARY));
    }

    @Test public void foreignIsTollFree() {
        CongestionTaxCalculator calculator = new CongestionTaxCalculator();
        ZonedDateTime dateTime = ZonedDateTime.of(2013, Month.AUGUST.getValue(), 14, 14, 0, 0, 0, ZoneId.of("CET"));
        assertEquals("Foreign shouldn't pay", 0, calculator.getTollFee(dateTime, TaxableVehicle.FOREIGN));
    }

    // TBD test getTax method
}
